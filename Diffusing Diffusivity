import numpy as np
import scipy.stats as ss
import statistics as stat
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from scipy.stats import kurtosis
from scipy.optimize import curve_fit
import math

#time and paths settings
dt=1
T=100
N=int(T/dt)
paths=1000
T_vec, dt = np.linspace(0, T, N, retstep=True)
t_axis = np.linspace(0, T, N)
rng = np.random.default_rng(75)

# Ornstein-Uhlenbeck parameters
y=np.zeros((N, paths))
y0=0
y[0,:]=y0
theta=1
sigma=1
my=np.zeros((N))
vary=np.zeros((N))
kury=np.zeros((N))

# Diffusing Diffusivity parameters
x=np.zeros((N, paths))
x0=0
x[0,:]=x0
mx=np.zeros((N))
varx=np.zeros((N))
kurx=np.zeros((N))


for t in range(1,N):
    dW = np.random.normal(0, np.sqrt(dt), paths)
    y[t, :] = y[t - 1, :] + (-theta) * (y[t - 1, :]) * dt + sigma * dW[:]


for t in range(1,N):
     dW =  np.random.normal(0, np.sqrt(dt),paths)
     x[t,:] = x[t-1,:]+np.sqrt(2*((y[t-1,:])**2))  *dW[:]



for  t in range(1,N):
    my[t] = np.mean(y[t, :])
    vary[t] = stat.pvariance(y[t, :])
    kury[t] = kurtosis(y[t, :])
    mx[t]=np.mean(x[t,:])
    varx[t]=stat.pvariance(x[t,:])
    kurx[t]= kurtosis(x[t,:])

# Plot the result
figure, axis = plt.subplots(2, 4)
for p in range(1,paths):
    axis[0,0].plot(T_vec,y[:,p])
    axis[1, 0].plot(T_vec, x[:, p])
axis[0,0].set_xlabel("Time")
axis[0,0].set_ylabel("Y(t)")
axis[0,0].set_title("Paths")
axis[1,0].set_xlabel("Time")
axis[1,0].set_ylabel("X(t)")


axis[0,1].plot(T_vec, my)
axis[1,1].plot(T_vec, mx)
axis[0,1].set_xlabel("Time")
axis[0,1].set_ylabel("<Y>")
axis[0,1].set_title("Mean")
axis[1,1].set_xlabel("Time")
axis[1,1].set_ylabel("<X>")

axis[0,2].plot(T_vec, vary)
axis[1, 2].plot(T_vec, varx)
axis[0,2].set_xlabel("Time")
axis[0,2].set_ylabel("<Y**2>-<Y>**2")
axis[0,2].set_title("Variance")
axis[1,2].set_xlabel("Time")
axis[1,2].set_ylabel("<X**2>-<X>**2")

axis[0, 3].plot(T_vec, kury)
axis[1, 3].plot(T_vec, kurx)
axis[0,3].set_xlabel("Time")
axis[0,3].set_ylabel("\u03BA")
axis[0,3].set_title("Kurtosis")
axis[1,3].set_xlabel("Time")
axis[1, 3].set_ylabel("\u03BA")
plt.show()
